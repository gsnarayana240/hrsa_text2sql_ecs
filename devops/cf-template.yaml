#IMPORTANT!!:  make sure cloud team gives permission to the user for admin role with Glue on ENV and prod. otherwise this will fail
#release foundational
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  pDepartment:
    Type: String
    Default: hrsa
  pProject:
    Type: String
    Default: text2sql
  pSecurityGroupId:
    Type: String
    Description: SecurityGroupIds
  pEnvironment:
    Type: String
    Default: d
  pSubnet1:
    Type: String
    Description: Subnet 1
  pSubnet2:
    Type: String
    Description: Subnet 2
  AWSRegion:
    Type: String
  ImageRepoName:
    Type: String
  ImageTag:
    Type: String
  ImageId:
    Type: String
  secretmanager:
    Type: String
    
Resources:
  hrsaCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-",[!Ref   pDepartment, !Ref   pProject,  !Ref pEnvironment , 'code-build', 'role' ]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codebuild-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchImportUpstreamImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetImageCopyStatus'
                Resource: 
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject*'
                  - 's3:PutObjectAcl'
                  - 's3:List*'
                  - 's3:Update*'
                  - 's3:CreateJob*'
                  - 's3:Get*'
                  - 's3:DeleteObject'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'codeconnections:UseConnection'
                  - 'codeconnections:GetConnection'
                Resource:
                  - '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  hrsCodebuild:
    Type: AWS::CodeBuild::Project
    Properties:
       Name: 'hrsatext2sqlcodebuild'
       ServiceRole: !GetAtt hrsaCodeBuildRole.Arn
       Source: 
         Type: github
         Location: https://github.com/gsnarayana240/hrsa_text2sql_ecs.git
         BuildSpec: build.yaml
         Auth:
           Type: OAUTH
           Resource: githubconnection
       Artifacts:
          Type: NO_ARTIFACTS
       Environment:
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_MEDIUM
          EnvironmentVariables: 
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: IMAGE_REPO_NAME
              Value: !Sub ${ImageRepoName}
            - Name: IMAGE_TAG
              Value: !Sub ${ImageTag}
            - Name: region
              Value: !Sub ${AWSRegion}
            - Name: secret_manager
              Value: !Sub ${secretmanager}
          Image: !Sub ${ImageId}
  LoadBalancerTargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
        Name: text2sqltargetgrp
        TargetType: ip
        Protocol: http
        Port: 80
        IpAddressType: ipv4
        ProtocolVersion: HTTP1
        HealthCheckProtocol: HTTP
        HealthCheckPath: /

  LoadBalancerCreation:
     Type: AWS::ElasticLoadBalancingV2::LoadBalancer
     Properties:
        Name: text2sqlloadbalancer
        Scheme: internet-facing
        IpAddressType: ipv4
        Subnets:
            - !Ref pSubnet1
            - !Ref pSubnet2
        SecurityGroups:
            - !Ref pSecurityGroupId

  LoadBalancerListner:
     Type: AWS::ElasticLoadBalancingV2::Listener
     Properties:
        Protocol: http
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: !GetAtt LoadBalancerTargetGroup.Arn
        LoadBalancerArn: !Ref LoadBalancerCreation
          
  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'hrsa/text2sqldocker2'
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
           
  MyECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-",[!Ref   pDepartment, !Ref   pProject,  !Ref pEnvironment , 'ecs-tasks', 'role' ]]
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds

  MyECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
          ClusterName: MyFargateCluster # Or MyEC2Cluster

  MyECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref MyECSCluster # Reference an existing ECS cluster
      ServiceName: my-app-service
      TaskDefinition: !Ref MyECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref pSubnet1
            - !Ref pSubnet2
          SecurityGroups:
            - !Ref pSecurityGroupId
        LoadBalancers:
          - ContainerName: my-app-container # Name of the container in your task definition
            ContainerPort: 80           # Port the container is listening on
            TargetGroupArn: !GetAtt LoadBalancerTargetGroup.Arn
            LoadBalancerName: !Ref LoadBalancerCreation
            
  MyECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-app-task-definition
      Cpu: "1024"
      Memory: "8192"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt MyECSTaskExecutionRole.Arn # Reference an IAM role for execution permissions
      TaskRoleArn: !GetAtt MyECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: my-app-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hrsa/text2sqldocker2" # Use !Sub to dynamically get Account ID and Region
          PortMappings:
            - ContainerPort: 8501
              Protocol: tcp
              HostPort: 8501
              AppProtocol: http
              
